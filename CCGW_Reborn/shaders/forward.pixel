#version 420 core

in vec2 texOut;
out vec4 finalColor;

uniform sampler2D ambientT;
uniform sampler2D diffuseT;
uniform sampler2D specularT;
uniform sampler2D normalT;
uniform sampler2D depthT;
uniform sampler2D shadowT;

uniform mat4 invViewPerspective;
uniform mat4 shadowInvViewPers;

uniform vec3 cameraPos;

void main (){
	float depth = texture(depthT, texOut).r;
	vec4 color = texture(ambientT, texOut);
	
	vec4 pos = (invViewPerspective * (vec4(texOut.x, texOut.y, depth, 1)*2-1));
	pos /= pos.w;

	vec4 shadowPos = shadowInvViewPers * pos;
	shadowPos /= shadowPos.w;

	float shadowDepth = texture(shadowT, vec2( shadowPos.x * 0.5 + 0.5, shadowPos.y * 0.5 + 0.5)).r;

	if (depth < 1.0 && shadowPos.z - 0.0001 < shadowDepth*2.0-1.0)
	{
		vec3 lightPos = vec3(0, 30, 0);
		vec3 normal = texture(normalT, texOut).rgb * 2 - 1;
		float spec = texture(specularT, texOut).r;

		vec3 eyeDir = normalize(cameraPos - pos.xyz);
		vec3 vHalfVector = normalize(reflect(lightPos - pos.xyz, normal));
		vec3 specular = vec3(spec) * max(pow((dot(eyeDir,vHalfVector)), 20), 0.0);
	
		//finalColor = pos;
		//finalColor = vec4(normal, 1.0);
		finalColor =  0.5 * color + 0.2 * max(dot(normalize(lightPos - pos.xyz), normal), 0.0) + 0.3* vec4( specular, 0.0 );
	}
	else
		finalColor = 0.5 * color ;
	
}
