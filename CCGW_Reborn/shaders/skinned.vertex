#version 420 core

in vec3 pos ;
in vec3 normal ;
in vec2 texPos ;
in vec3 tangent ;
in vec3 bitangent ;
in ivec4 influences ;
in vec4 weights ;

out vec4 posOut;
out vec2 uvOut;
out vec3 normalOut;
out mat3 tbnOut;

uniform mat4 animationMatrices[32];
uniform mat4 world;

void main()
{
	/*Initialize 4 weight values to be assigned further in code.*/
	vec4 vw = vec4( 0.f, 0.f, 0.f, 0.f );

	//To get the 4th weight so that the sum of the weights add up to 1,
	//we subtract 1 with the weights 0, 1, 2.
	vw[0] = weights[0];
	vw[1] = weights[1];
	vw[2] = weights[2];
	vw[3] = 1.f - weights[0] - weights[1] - weights[2]; 

	//vec4 vw = vec4( 0.0, 1.0, 0.0, 0.0 );
	vec4 vpos = vec4( 0.0, 0.0, 0.0, 0.0 );
	for( int i=0; i<4; i++ )
	{
		vpos += ( ( vec4( pos, 1.0 )) * animationMatrices[influences[i]]* vw[i]);
		//vpos += vw[i] * ( vec4( pos, 1.0 ) * animationMatrices[influences[i]] );
		//vpos += weights[i] * ( vec4( pos, 1.0 ) * animationMatrices[influences[i]] );
	}

	//posOut = world * vec4(pos, 1.0);
	posOut = world * vec4( vec3(vpos), 1.0f );

	uvOut = texPos;
	normalOut = normal;

	vec3 T = normalize( vec3(vec4( tangent, 0.0 ) ) );
	vec3 B = normalize( vec3(  vec4( bitangent, 0.0 ) ) );
	vec3 N = normalize( vec3(  vec4( normal, 0.0 ) ) );

	tbnOut = mat3( T, B, N );
}